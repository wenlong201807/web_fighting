// 题目：https://mp.weixin.qq.com/s?__biz=MzI2NjI5MzU2Nw==&mid=2247484357&idx=1&sn=05c4cbedb8f3f220dfce3f1c79a71693&chksm=ea911b95dde6928310b6fcc88c2b28e9c27888e9d4e63a0045d88ef7a0fecf73d2467ecd177f&scene=21#wechat_redirect
// 通关：

/**
 * 第268题：不使用运算符 + 和 - ，计算两整数 a 、b 之和。
 * 
 * 知识点：
 * 1.“异或”是一个无进位加法，说白了就是把进位砍掉。比如01^01=00。
 * 2.“与”可以用来获取进位，比如01&01=01，然后再把结果左移一位，就可以获取进位结果。
 * 3.位运算技巧总结
 * https://mp.weixin.qq.com/s?__biz=MzI2NjI5MzU2Nw==&mid=2247484357&idx=1&sn=05c4cbedb8f3f220dfce3f1c79a71693&chksm=ea911b95dde6928310b6fcc88c2b28e9c27888e9d4e63a0045d88ef7a0fecf73d2467ecd177f&scene=21#wechat_redirect
 * 位运算基本规则 https://www.cnblogs.com/yrjns/p/11246163.html
 * &   按位与     两个位都为1时，结果才为1
 * |   按位或     两个位都为0时，结果才为0
 * ^   按位异或   两个位相同为0，相异为1
 * ~   按位取反   0变1，1变0
 * <<  左移      各二进位全部左移若干位，高位丢弃，低位补0
 * >>  右移      定义：将一个数的各二进制位全部右移若干位，正数左补0，负数左补1，右边丢弃。
 *
 * 4.必须掌握的技巧
 * 1、使用 x & 1 == 1 判断奇偶数。（注意，一些编辑器底层会把用%判断奇偶数的代码，自动优化成位运算）
 * 2、不使用第三个数，交换两个数。x = x ^ y ， y = x ^ y ， x = x ^ y。（早些年喜欢问到，现在如果谁再问，大家会觉得很low）
 * 3、两个相同的数异或的结果是 0，一个数和 0 异或的结果是它本身。（对于找数这块，异或往往有一些别样的用处。）
 * 4、x & (x - 1) ，可以将最右边的 1 设置为 0。（这个技巧可以用来检测 2的幂，或者检测一个整数二进制中 1 的个数，又或者别人问你一个数变成另一个数其中改变了多少个bit位，统统都是它）
 * 5、i+(~i)=-1，i 取反再与 i 相加，相当于把所有二进制位设为1，其十进制结果为-1。
 * 6、对于int32而言，使用 n >> 31取得 n 的正负号。并且可以通过 (n ^ (n >> 31)) - (n >> 31) 来得到绝对值。（n为正，n >> 31 的所有位等于0。若n为负数，n >> 31 的所有位等于1，其值等于-1）
 * 7、使用 (x ^ y) >= 0 来判断符号是否相同。（如果两个数都是正数,则二进制的第一位均为0,x^y=0；如果两个数都是负数,则二进制的第一位均为1；x^y=0 如果两个数符号相反,则二进制的第一位相反,x^y=1。有0的情况例外，^相同得0，不同得1）
 * 
*/

let a = 1, b = 2
// let a = 12, b = 7

const getSum = (a, b) => {
  let i=0
  while (b !== 0) {
    let temp = a ^ b
    b = (a & b) << 1
    a = temp
    i++
    console.log(i,temp,a,b)
  }
  console.log(a)
  return a
}

// getSum(a, b)

// 测试
// let temp = a ^ b
// console.log(temp)
let temp = (a & b) << 1
console.log(temp)