/**
 * 20200512 
 * 题目：判断扑克牌的顺子
 * 描述：从扑克牌中随机抽5张，判断是不是一个顺子，即这5张牌是不是连续的，
 * 2--10为数字本身，A 为 1， J 为 11， Q 为 12 , K 为 13 , 而大,小王为0,可以看成任意数字, A 不能视为14。
 * 
 * 参考答案：
 * 整体的算法流程是：
 * 1.首先应该是对数组进行排序。
 * 2.排除数组中大小王(0)。
 * 3.统计数组中所有相邻数之间的间隔。
 * 4.同时还需要排除对子的情况，如果出现了对子，那么肯定更不可能是顺子(0除外)。
 * 5.最后判断间隔值，如果大于等于4，说明可以组成顺子。
*/

function isStraight (nums) {
  // 从小到大排序
  const mixSort = nums.sort((a, b) => a - b)
  //记录每一个数字之间的差值，反正不等大于4
  let sum = 0
  // 不能超过4
  for (let i = 0; i < 4; i++) {
    // 忽略0也就是王
    if (mixSort[i] == 0) {
      continue
    }
    // 如果扑克牌 (非0) 重复，说明不是顺子
    else if (nums[i] == nums[i + 1]) {
      return false
    } else {
      // 差值记录
      sum = sum + nums[i + 1] - nums[i]
    }
  }
  // 如果超过4，说明不是顺子
  return sum < 5
}